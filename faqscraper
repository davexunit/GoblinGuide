#!/usr/bin/python

import curses
import sys
import fnmatch
import urllib
import subprocess
import sqlite3
import scrape

class FAQScraper:
	def __init__(self):
		self.activities = [self.main_menu]
		
	def run(self):
		while len(self.activities):
			curses.wrapper(self.activities[-1])
	
	def mode_push(self, mode):
		self.activities.append(mode)
	
	def mode_replace(self, mode):
		self.activities[-1] = mode
	
	def mode_pop(self):
		self.activities.pop()
	
	def mode_clear(self):
		self.activities = []
	
	def main_menu(self, screen):
		# Main menu options
		choices = ('Search for FAQs', 'Browse library', 'Quit')

		# Get width and height of window
		height, width = screen.getmaxyx()
		# Prompt user with a menu to choose the search result they want
		choice = menu(screen, 1, 1, height - 2, width - 2, 'FAQ Scraper 0.1', choices)

		# Perform selected action
		# Search
		if choice == 0:
			self.mode_push(self.search)
		# Library
		elif choice == 1:
			self.mode_push(self.library)
		# Quit
		elif choice == 2 or choice == -1:
			self.mode_pop()
	
	def library(self, screen):
		# Connect to library database
		self.db = sqlite3.connect('faqs.db')
		# Create cursor
		c = self.db.cursor()
		# Query for all games
		c.execute('select platform, title from game')
		# Assemble menu from query results
		choices = []
		for row in c:
			choices.append('%s - %s' % row)
		# If the list of choices is empty then just print the sad message :[
		clear(screen)
		if len(choices) == 0:
			screen.addstr(1, 1, 'Your library is empty! :\'(')
			self.mode_pop()
			screen.getch()
		else:
			# Get width and height of window
			height, width = screen.getmaxyx()
			# Prompt user with a menu to choose the search result they want
			choice = menu(screen, 1, 1, height - 2, width - 2, 'Games', choices)
			# Perform choice
			# Quit
			if choice == -1:
				self.mode_pop()
			else:
				self.gamenum = choice + 1
				self.mode_push(self.library_faq)
	
	def library_faq(self, screen):
		# Create cursor
		c = self.db.cursor()
		# Query for all games
		data = [self.gamenum]
		c.execute('select title, author, date, version from faq where gamenum=?', data)
		# Assemble menu from query results
		choices = []
		for row in c:
			choices.append('%s - %s - %s - %s' % row)
		# If the list of choices is empty then just print the sad message :[
		clear(screen)
		if len(choices) == 0:
			screen.addstr(1, 1, 'No FAQs here! Stop manually editing the database! :P')
			self.mode_pop()
			screen.getch()
		else:
			# Get width and height of window
			height, width = screen.getmaxyx()
			# Prompt user with a menu to choose the search result they want
			choice = menu(screen, 1, 1, height - 2, width - 2, 'FAQs', choices)
			# Perform choice
			# Quit
			if choice == -1:
				self.mode_pop()
	
	def search(self, screen):
		clear(screen)
		search = get_input(screen, 1, 1, 'Enter game search: ', 60)
		self.search_results = scrape.game_search(search)
		self.mode_replace(self.choose_game)
	
	def choose_game(self, screen):
		'''Displays a menu for the user to choose a game from a list of search results.
		'''
		# If there are no search results then show an informative message and don't show a menu
		if len(self.search_results) == 0:
			clear(screen)
			screen.addstr(1, 1, 'No search results :\'(')
			screen.getch()
			return

		# Make the strings for menu choices
		choices = []
		for result in self.search_results:
			choices.append('%s - %s' % result[:2])

		# Get width and height of window
		height, width = screen.getmaxyx()
		# Prompt user with a menu to choose the search result they want
		choice = menu(screen, 1, 1, height - 2, width - 2, 'Search Results', choices)

		# Leave function if -1 is returned
		if choice == -1:
			self.mode_pop()
		else:
			# Move to the FAQs display screen
			self.game_url = self.search_results[choice][2]
			self.mode_push(self.choose_faq)
	
	def choose_faq(self, screen):
		'''Displays a menu to choose a FAQ for a game
		Assumes that faq_url is a url to the correct page
		'''
		# Scrape the FAQs page
		faqs = scrape.faqs(self.game_url)
		# Make the strings for menu choices
		choices = []
		for faq in faqs:
			choices.append('%s - %s - %s - %s - %s' % faq[:5])

		# Get width and height of window
		height, width = screen.getmaxyx()
		# Prompt user with a menu to choose the search result they want
		choice = menu(screen, 1, 1, height - 2, width - 2, 'FAQs', choices)

		# Leave function if -1 is returned
		if choice == -1:
			self.mode_pop()
		else:
			faq_url = faqs[choice][5]
			# Most of the time the FAQ links are html files that need one more step of scraping to get the plain text...
			# ... but sometimes the link goes directly to the text file
			# So, that's what this little line of code checks for
			if not fnmatch.fnmatch(faq_url, '*.txt'):
				faq_url = scrape.plaintext_faq(faqs[choice][5])
			self.read_faq(faq_url)
	
	def read_faq(self, faq_url):
		'''Opens a url, writes the FAQ to a file, and opens it in the system default editor
		'''
		temp_file = '/tmp/faq.txt'
		urllib.urlretrieve(faq_url, temp_file) 
		# Open FAQ in the default editor
		# This may be a Debian only thing though...
		subprocess.call(['editor', temp_file])

def clear(screen):
	screen.clear()
	screen.border(0)

def reset(screen):
	curses.noecho()
	curses.cbreak()
	screen.keypad(1)

def get_input(screen, y, x, prompt, strlen):
	screen.addstr(y, x, prompt)
	screen.refresh()
	curses.echo()
	user_input = screen.getstr(y, x + len(prompt), strlen)
	curses.noecho()
	return user_input

def menu(screen, y, x, height, width, title, choices):
	'''Displays a menu for the user to choose a game from a list of search results.
	'''
	choice = 0
	# The menu list will be in a pad
	pad = curses.newpad(len(choices), width)
	# Display the title
	clear(screen)
	screen.addstr(y, (width - len(title)) / 2, title, curses.A_BOLD)
	screen.refresh()
	# Adjust y value for the pad
	y += 1
	# Loop while responding to keyboard input
	while True:
		# Display all search results
		for i, c in enumerate(choices):
			if i == choice:
				flag = curses.A_REVERSE
			else:
				flag = 0
			pad.addstr(i, 1, c, flag)
		# Display menu entry and center the pad on the selected item, clamping to the top and bottom of the pad
		pad.refresh(min(len(choices) - height + 1, max(0, choice - height / 2)), 0, y, x, height, width)
		# Get a key prss
		c = screen.getch()
		# Quit on q
		if c == ord('q'):
			return -1
		# Scroll up/down list
		elif c == curses.KEY_DOWN or c == ord('j'):
			choice += 1
			choice = min(len(choices) - 1, choice)
		elif c == curses.KEY_UP or c == ord('k'):
			choice -= 1
			choice = max(0, choice)
		# Page up/down
		elif c == curses.KEY_NPAGE:
			choice += height - 1
			choice = min(len(choices) - 1, choice)
		elif c == curses.KEY_PPAGE:
			choice -= height - 1
			choice = max(0, choice)
		# Home/End
		elif c == curses.KEY_HOME:
			choice = 0
		elif c == curses.KEY_END:
			choice = len(choices) - 1
		# Break out of loop on enter key which will bring the user to the FAQ screen
		elif c == ord('\n'):
			break
	
	return choice

if __name__ == '__main__':
	FAQScraper().run()
